// Code generated by MockGen. DO NOT EDIT.
// Source: utils/http.go

// Package utils is a generated GoMock package.
package utils

import (
	bytes "bytes"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHTTPClientInterface is a mock of HTTPClientInterface interface.
type MockHTTPClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientInterfaceMockRecorder
}

// MockHTTPClientInterfaceMockRecorder is the mock recorder for MockHTTPClientInterface.
type MockHTTPClientInterfaceMockRecorder struct {
	mock *MockHTTPClientInterface
}

// NewMockHTTPClientInterface creates a new mock instance.
func NewMockHTTPClientInterface(ctrl *gomock.Controller) *MockHTTPClientInterface {
	mock := &MockHTTPClientInterface{ctrl: ctrl}
	mock.recorder = &MockHTTPClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClientInterface) EXPECT() *MockHTTPClientInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockHTTPClientInterface) Get(ctx context.Context, url string, parameters interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, url, parameters)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHTTPClientInterfaceMockRecorder) Get(ctx, url, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTPClientInterface)(nil).Get), ctx, url, parameters)
}

// Post mocks base method.
func (m *MockHTTPClientInterface) Post(ctx context.Context, url string, headers, parameters map[string]string, body []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, url, headers, parameters, body)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockHTTPClientInterfaceMockRecorder) Post(ctx, url, headers, parameters, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHTTPClientInterface)(nil).Post), ctx, url, headers, parameters, body)
}

// PostFormData mocks base method.
func (m *MockHTTPClientInterface) PostFormData(ctx context.Context, url string, headers map[string]string, parameters map[string][]string, files map[string]map[string]bytes.Buffer) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostFormData", ctx, url, headers, parameters, files)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostFormData indicates an expected call of PostFormData.
func (mr *MockHTTPClientInterfaceMockRecorder) PostFormData(ctx, url, headers, parameters, files interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostFormData", reflect.TypeOf((*MockHTTPClientInterface)(nil).PostFormData), ctx, url, headers, parameters, files)
}
